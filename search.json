[{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://loelschlaeger.de/optimizeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://loelschlaeger.de/optimizeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer. Marius Ötting. Contributor.","code":""},{"path":"https://loelschlaeger.de/optimizeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oelschläger L (2024). optimizeR: Unified Framework Numerical Optimizers. R package version 1.1.2, https://github.com/loelschlaeger/optimizeR/, https://loelschlaeger.de/optimizeR/.","code":"@Manual{,   title = {optimizeR: Unified Framework for Numerical Optimizers},   author = {Lennart Oelschläger},   year = {2024},   note = {R package version 1.1.2, https://github.com/loelschlaeger/optimizeR/},   url = {https://loelschlaeger.de/optimizeR/}, }"},{"path":"https://loelschlaeger.de/optimizeR/index.html","id":"optimizer-","dir":"","previous_headings":"","what":"Unified Framework for Numerical Optimizers in R","title":"Unified Framework for Numerical Optimizers in R","text":"optimizeR package provides object-oriented framework optimizer functions R offers convenience useRs minimizing maximizing. ❌ won’t need package … already know optimizer want use happy constraints (e.g., minimization first function argument possible), want compare optimizers already covered {optimx} (Nash Varadhan 2011) (provide framework compare 30 optimizers), search new optimization algorithms (package implement optimizer functions ). ✅ might find package useful want … compare optimizer function (also covered {optimx} frameworks; see CRAN Task View: Optimization Mathematical Programming (Schwendinger Borchers 2023) overview R optimizers), consistently named inputs outputs across different optimizers (generally case), view optimizers objects (can helpful implementing packages depend optimization), use optimizers minimization maximization, optimize one function argument, measure computation time set time limit long optimization tasks.","code":""},{"path":"https://loelschlaeger.de/optimizeR/index.html","id":"how-to-use-the-package","dir":"","previous_headings":"","what":"How to use the package?","title":"Unified Framework for Numerical Optimizers in R","text":"following demo bit artificial showcases package purpose. Let’s assume want maximize function two arguments, interrupt optimization exceeds 10 seconds, compare performance optimizers stats::nlm pracma::nelder_mead. can easily task optimizeR: 1. Define objective function Let f:ℝ4→ℝf:\\mathbb{R}^4\\\\mathbb{R} = b = 20, inverted Ackley function global maximum x = y = 0:  want keep b fixed optimize x y (also single numeric values). Two problems occur optimize f say stats::nlm directly: two target arguments (x y) position target argument first place. artifacts allowed stats::nlm available optimizers, supported optimizeR. just define objective object later can pass optimizers: 2. Create optimizer objects Now defined objective function, let’s define optimizer objects. stats::nlm, one-liner: optimizeR package provides dictionary optimizers, can directly selected via argument. overview available optimizers, see: fact optimizer contained dictionary can put optimizeR framework setting = \"custom\" first… … using $definition() method next: 3. Set time limit optimizer object field called $seconds equals Inf default. can optionally set different, single numeric value set time limit seconds optimization: Note everything (especially compiled C code) can technically timed , see help site help(\"withTimeout\", package = \"R.utils\") details. 4. Maximize objective function optimizer object two methods $maximize() $minimize() function maximization minimization, respectively. methods require values two arguments objective (either objective object defined just function) initial (initial parameter vector optimizer start) optionally accepts additional arguments passed optimizer objective function. Note inputs objective function initial parameter values named consistently across optimizers, output values optimal parameter vector maximimum function value also named consistently across optimizers, output contains initial parameter values optimization time seconds additionally optimizer-specific elements, pracma::nelder_mead outperforms stats::nlm terms optimization time convergence global maximum.","code":"library(\"optimizeR\") f <- function(a, b, x, y) {   a * exp(-0.2 * sqrt(0.5 * (x^2 + y^2))) + exp(0.5 * (cos(2 * pi * x) + cos(2 * pi * y))) - exp(1) - b } objective <- Objective$new(   f = f,                 # f is our objective function   target = c(\"x\", \"y\"),  # x and y are the target arguments   npar = c(1, 1),        # the target arguments have both a length of 1   \"a\" = 20,                 \"b\" = 20               # a and b have fixed values ) nlm <- Optimizer$new(which = \"stats::nlm\") optimizer_dictionary #> <Dictionary> optimizer algorithms  #> Keys:  #> - lbfgsb3c::lbfgsb3c #> - stats::nlm #> - stats::nlminb #> - stats::optim #> - ucminf::ucminf nelder_mead <- Optimizer$new(which = \"custom\") #> Please use method `$definition()` next to define a custom optimizer. nelder_mead$definition(   algorithm = pracma::nelder_mead, # the optimization function   arg_objective = \"fn\",            # the argument name for the objective function   arg_initial = \"x0\",              # the argument name for the initial values   out_value = \"fmin\",              # the element for the optimal function value in the output   out_parameter = \"xmin\",          # the element for the optimal parameters in the output   direction = \"min\"                # the optimizer minimizes ) nlm$seconds <- 10 nelder_mead$seconds <- 10 nlm$maximize(objective = objective, initial = c(3, 3)) #> $value #> [1] -6.559645 #>  #> $parameter #> [1] 1.974451 1.974451 #>  #> $seconds #> [1] 0.01002908 #>  #> $initial #> [1] 3 3 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] 5.757896e-08 5.757896e-08 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 6 nelder_mead$maximize(objective = objective, initial = c(3, 3)) #> $value #> [1] 0 #>  #> $parameter #> [1] 0 0 #>  #> $seconds #> [1] 0.005402327 #>  #> $initial #> [1] 3 3 #>  #> $error #> [1] FALSE #>  #> $count #> [1] 105 #>  #> $info #> $info$solver #> [1] \"Nelder-Mead\" #>  #> $info$restarts #> [1] 0"},{"path":"https://loelschlaeger.de/optimizeR/index.html","id":"how-to-get-the-access","dir":"","previous_headings":"","what":"How to get the access?","title":"Unified Framework for Numerical Optimizers in R","text":"can install released package version CRAN : load package via library(\"optimizeR\") ready go.","code":"install.packages(\"optimizeR\")"},{"path":"https://loelschlaeger.de/optimizeR/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Unified Framework for Numerical Optimizers in R","text":"following steps improve package currently agenda: package already provides dictionary stores optimizers together information names inputs outputs (see optimizer_dictionary object). want extend dictionary optimizers commonly used. want use alias optimizers dictionary group optimizers classes (“unconstrained optimization”, “constrained Optimization”, “direct search”, “Newton-type” etc.). help find alternative optimizers given task. want implement $summary() method optimizer object gives overview optimizer, arguments, properties.","code":""},{"path":"https://loelschlaeger.de/optimizeR/index.html","id":"getting-in-touch","dir":"","previous_headings":"","what":"Getting in touch","title":"Unified Framework for Numerical Optimizers in R","text":"question, found bug, request feature, want give feedback, like contribute? great hear , please file issue GitHub. 😊","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify objective function — Objective","title":"Specify objective function — Objective","text":"Objective object specifies framework objective function numerical optimization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify objective function — Objective","text":"Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Specify objective function — Objective","text":"objective_name character, label objective function. fixed_arguments character, names fixed arguments (). seconds numeric, time limit seconds. Computations interrupted prematurely seconds exceeded. time limit seconds = Inf (default). Note limitations documented setTimeLimit. hide_warnings Either TRUE hide warnings evaluating objective function, FALSE (default) . verbose Either TRUE (default) print status messages, FALSE hide . npar integer vector, defining length target argument. output_template template expected output value, used validate method.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Specify objective function — Objective","text":"Objective$new() Objective$set_argument() Objective$get_argument() Objective$remove_argument() Objective$validate() Objective$evaluate() Objective$print() Objective$clone()","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Specify objective function — Objective","text":"Creates new Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$new(f, target = NULL, npar, ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":"f function optimized. expected f least one numeric argument. , expected return value f structure numeric(1), .e. single numeric value (although can altered via output_template field). target character, argument name(s) f get optimized. target arguments must receive numeric vector. Can NULL (default), first argument f. npar integer length target, defining length respective numeric vector argument. ... Optionally additional arguments f fixed optimization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"new Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-set-argument-","dir":"Reference","previous_headings":"","what":"Method set_argument()","title":"Specify objective function — Objective","text":"Set fixed function argument.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$set_argument(..., overwrite = TRUE, verbose = self$verbose)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":"... Optionally additional arguments f fixed optimization. overwrite Either TRUE (default) allow overwriting, FALSE . verbose Either TRUE (default) print status messages, FALSE hide .","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"Invisibly Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-get-argument-","dir":"Reference","previous_headings":"","what":"Method get_argument()","title":"Specify objective function — Objective","text":"Get fixed function argument.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$get_argument(argument_name, verbose = self$verbose)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":"argument_name character, name argument f. verbose Either TRUE (default) print status messages, FALSE hide .","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"argument value.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-remove-argument-","dir":"Reference","previous_headings":"","what":"Method remove_argument()","title":"Specify objective function — Objective","text":"Remove fixed function argument.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$remove_argument(argument_name, verbose = self$verbose)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":"argument_name character, name argument f. verbose Either TRUE (default) print status messages, FALSE hide .","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"Invisibly Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Specify objective function — Objective","text":"Validate Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$validate(.at)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":".numeric length sum(self$npar), values target arguments written single vector.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"Invisibly Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-evaluate-","dir":"Reference","previous_headings":"","what":"Method evaluate()","title":"Specify objective function — Objective","text":"Evaluate objective function.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$evaluate(.at, .negate = FALSE, ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":".numeric length sum(self$npar), values target arguments written single vector. .negate Either TRUE negate numeric return value f, FALSE (default) else. ... Optionally additional arguments f fixed optimization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"objective value.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Specify objective function — Objective","text":"Print details Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$print()"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify objective function — Objective","text":"Invisibly Objective object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Specify objective function — Objective","text":"objects class cloneable method.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify objective function — Objective","text":"","code":"Objective$clone(deep = FALSE)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify objective function — Objective","text":"deep Whether make deep clone.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Objective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify objective function — Objective","text":"","code":"### define log-likelihood function of Gaussian mixture model llk <- function(mu, sd, lambda, data) {   sd <- exp(sd)   lambda <- plogis(lambda)   cluster_1 <- lambda * dnorm(data, mu[1], sd[1])   cluster_2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(cluster_1 + cluster_2)) }  ### the log-likelihood function is supposed to be optimized over the first ### three arguments, the 'data' argument is constant objective <- Objective$new(   f = llk, target = c(\"mu\", \"sd\", \"lambda\"), npar = c(2, 2, 1),   data = faithful$eruptions )  ### evaluate the objective function at 1:5 (1:2 is passed to mu, 3:4 to sd, ### and 5 to lambda) objective$evaluate(1:5) #> [1] -1069.623"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify numerical optimizer as R6 object — Optimizer","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Optimizer R6 object defines numerical optimizer based optimization function implemented R. main advantage working Optimizer object instead using optimization function directly lies standardized inputs outputs. R function fulfills following four constraints can defined Optimizer object: must input function, objective function optimized. must input numeric vector, initial values optimizer starts. must ... argument additional parameters passed objective function. output must named list, including optimal function value optimal parameter vector.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Specify numerical optimizer as R6 object — Optimizer","text":"label character, label optimizer. algorithm function, optimization algorithm. arg_objective character, argument name objective function algorithm. arg_initial character, argument name initial values algorithm. out_value character, element name optimal function value output list algorithm. out_parameter character, element name optimal parameters output list algorithm. direction Either \"min\" (optimizer minimizes) \"max\" (optimizer maximizes). arguments named list custom arguments algorithm. Defaults used arguments specified. seconds numeric, time limit seconds. Optimization interrupted prematurely seconds exceeded. time limit seconds = Inf (default). Note limitations documented setTimeLimit. hide_warnings Either TRUE hide warnings optimization, FALSE (default) else. output_ignore character vector elements ignore optimization output.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Optimizer$new() Optimizer$definition() Optimizer$set_arguments() Optimizer$validate() Optimizer$minimize() Optimizer$maximize() Optimizer$optimize() Optimizer$print() Optimizer$clone()","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Initializes new Optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$new(which, ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"character, either one optimizer_dictionary$keys \"custom\" (case $definition() must used define optimizer details). ... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"new Optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-definition-","dir":"Reference","previous_headings":"","what":"Method definition()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Defines optimizer.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$definition(   algorithm,   arg_objective,   arg_initial,   out_value,   out_parameter,   direction )"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"algorithm function, optimization algorithm. arg_objective character, argument name objective function algorithm. arg_initial character, argument name initial values algorithm. out_value character, element name optimal function value output list algorithm. out_parameter character, element name optimal parameters output list algorithm. direction Either \"min\" (optimizer minimizes) \"max\" (optimizer maximizes).","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Invisibly Optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-set-arguments-","dir":"Reference","previous_headings":"","what":"Method set_arguments()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Sets optimizer arguments.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$set_arguments(...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Validates Optimizer object. time limit seconds optimization can set via $seconds field.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$validate(   objective = optimizeR::test_objective,   initial = round(stats::rnorm(2)),   ...,   direction = \"min\" )"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"objective function optimized least one argument receives numeric vector returns single numeric value. Alternatively, can also Objective object flexibility. initial numeric vector starting parameter values optimization. ... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used. direction Either \"min\" minimization \"max\" maximization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-minimize-","dir":"Reference","previous_headings":"","what":"Method minimize()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Performing minimization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$minimize(objective, initial, ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"objective function optimized least one argument receives numeric vector returns single numeric value. Alternatively, can also Objective object flexibility. initial numeric vector starting parameter values optimization. ... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"named list, containing least five elements: value numeric, minimum function value. parameter numeric vector, parameter vector minimum obtained. seconds numeric, optimization time seconds. initial numeric, initial parameter values. error Either TRUE error occurred, FALSE, else. Appended additional output elements optimizer. error occurred, error message also appended element error_message. time limit exceeded, also counts error. addition, flag time_out = TRUE appended.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$new(\"stats::nlm\")$   minimize(objective = function(x) x^4 + 3*x - 5, initial = 2)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-maximize-","dir":"Reference","previous_headings":"","what":"Method maximize()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Performing maximization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$maximize(objective, initial, ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"objective function optimized least one argument receives numeric vector returns single numeric value. Alternatively, can also Objective object flexibility. initial numeric vector starting parameter values optimization. ... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"named list, containing least five elements: value numeric, maximum function value. parameter numeric vector, parameter vector maximum obtained. seconds numeric, optimization time seconds. initial numeric, initial parameter values. error Either TRUE error occurred, FALSE, else. Appended additional output elements optimizer. error occurred, error message also appended element error_message. time limit exceeded, also counts error. addition, flag time_out = TRUE appended.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$new(\"stats::nlm\")$   maximize(objective = function(x) -x^4 + 3*x - 5, initial = 2)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Performing minimization maximization.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$optimize(objective, initial, direction = \"min\", ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"objective function optimized least one argument receives numeric vector returns single numeric value. Alternatively, can also Objective object flexibility. initial numeric vector starting parameter values optimization. direction Either \"min\" minimization \"max\" maximization. ... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"named list, containing least five elements: value numeric, maximum function value. parameter numeric vector, parameter vector maximum obtained. seconds numeric, optimization time seconds. initial numeric, initial parameter values. error Either TRUE error occurred, FALSE, else. Appended additional output elements optimizer. error occurred, error message also appended element error_message. time limit exceeded, also counts error. addition, flag time_out = TRUE appended.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"objective <- function(x) -x^4 + 3*x - 5 optimizer <- Optimizer$new(\"stats::nlm\") optimizer$optimize(objective = objective, initial = 2, direction = \"min\") optimizer$optimize(objective = objective, initial = 2, direction = \"max\")"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Prints optimizer label.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$print(...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"... Optionally additional arguments passed optimizer algorithm. Without specifications, default values used.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Specify numerical optimizer as R6 object — Optimizer","text":"Invisibly Optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Specify numerical optimizer as R6 object — Optimizer","text":"objects class cloneable method.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"Optimizer$clone(deep = FALSE)"},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer as R6 object — Optimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/Optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify numerical optimizer as R6 object — Optimizer","text":"","code":"### Task: compare minimization with 'stats::nlm' and 'pracma::nelder_mead'  # 1. define objective function and initial values objective <- TestFunctions::TF_ackley initial <- c(3, 3)  # 2. get overview of optimizers in dictionary optimizer_dictionary$keys #> [1] \"lbfgsb3c::lbfgsb3c\" \"stats::nlm\"         \"stats::nlminb\"      #> [4] \"stats::optim\"       \"ucminf::ucminf\"      # 3. define 'nlm' optimizer nlm <- Optimizer$new(which = \"stats::nlm\")  # 4. define the 'pracma::nelder_mead' optimizer (not contained in the dictionary) nelder_mead <- Optimizer$new(which = \"custom\") #> Please use method `$definition()` next to define a custom optimizer. nelder_mead$definition(   algorithm = pracma::nelder_mead, # the optimization function   arg_objective = \"fn\",            # the argument name for the objective function   arg_initial = \"x0\",              # the argument name for the initial values   out_value = \"fmin\",              # the element for the optimal function value in the output   out_parameter = \"xmin\",          # the element for the optimal parameters in the output   direction = \"min\"                # the optimizer minimizes )  # 5. compare the minimization results nlm$minimize(objective, initial) #> $value #> [1] 6.559645 #>  #> $parameter #> [1] 1.974451 1.974451 #>  #> $seconds #> [1] 0.01338601 #>  #> $initial #> [1] 3 3 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] 5.757896e-08 5.757896e-08 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 6 #>  nelder_mead$minimize(objective, initial) #> $value #> [1] 4.440892e-16 #>  #> $parameter #> [1] 0 0 #>  #> $seconds #> [1] 0.009227514 #>  #> $initial #> [1] 3 3 #>  #> $error #> [1] FALSE #>  #> $count #> [1] 105 #>  #> $info #> $info$solver #> [1] \"Nelder-Mead\" #>  #> $info$restarts #> [1] 0 #>  #>    ## ------------------------------------------------ ## Method `Optimizer$minimize` ## ------------------------------------------------  Optimizer$new(\"stats::nlm\")$   minimize(objective = function(x) x^4 + 3*x - 5, initial = 2) #> $value #> [1] -7.044261 #>  #> $parameter #> [1] -0.9085614 #>  #> $seconds #> [1] 0.001205921 #>  #> $initial #> [1] 2 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] -6.068035e-06 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 7 #>   ## ------------------------------------------------ ## Method `Optimizer$maximize` ## ------------------------------------------------  Optimizer$new(\"stats::nlm\")$   maximize(objective = function(x) -x^4 + 3*x - 5, initial = 2) #> $value #> [1] -2.955739 #>  #> $parameter #> [1] 0.9085598 #>  #> $seconds #> [1] 0.001421928 #>  #> $initial #> [1] 2 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] -3.801404e-07 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 8 #>   ## ------------------------------------------------ ## Method `Optimizer$optimize` ## ------------------------------------------------  objective <- function(x) -x^4 + 3*x - 5 optimizer <- Optimizer$new(\"stats::nlm\") optimizer$optimize(objective = objective, initial = 2, direction = \"min\") #> $value #> [1] -1.012458e+16 #>  #> $parameter #> [1] 10031 #>  #> $seconds #> [1] 0.0009684563 #>  #> $initial #> [1] 2 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] -4.037322e+12 #>  #> $code #> [1] 5 #>  #> $iterations #> [1] 6 #>  optimizer$optimize(objective = objective, initial = 2, direction = \"max\") #> $value #> [1] -2.955739 #>  #> $parameter #> [1] 0.9085598 #>  #> $seconds #> [1] 0.001451492 #>  #> $initial #> [1] 2 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] -3.801404e-07 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 8 #>"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch Between Parameter Spaces — ParameterSpaces","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"R6 object manages two related parameter spaces: Optimization Space (optimization) Interpretation Space (easier interpretation). Optimization Space, parameters stored numeric vector, standard format numerical optimizers. Parameters space typically identified. Interpretation Space, parameters stored list can take different formats (e.g., matrix). Parameters need identified. user can define transformation functions (necessarily bijective) switch two spaces via $o2i() $i2o() methods.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"ParameterSpaces$new() ParameterSpaces$print() ParameterSpaces$switch() ParameterSpaces$o2i() ParameterSpaces$i2o() ParameterSpaces$clone()","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"Initializes new ParameterSpaces object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"ParameterSpaces$new(parameter_names, parameter_lengths_in_o_space)"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"parameter_names [character()] Unique names parameters. parameter_lengths_in_o_space [integer()] length parameter optimization space.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"new ParameterSpaces object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"Print overview parameter spaces.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"ParameterSpaces$print(show_transformer = FALSE)"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"show_transformer [logical(1)] Show transformer functions output?","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"method-switch-","dir":"Reference","previous_headings":"","what":"Method switch()","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"Switch Optimization Space Interpretation Space.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"ParameterSpaces$switch(x, to = NULL)"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"x [numeric() | list()] parameters, either numeric vector (switched Interpretation Space), list() (switched Optimization Space). [character(1) | NULL] Explicitly switch specific space, either \"o\": Optimization Space \"\": Interpretation Space NULL, function switch space.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"method-o-i-","dir":"Reference","previous_headings":"","what":"Method o2i()","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"Define transformation functions switching Optimization Space Interpretation Space.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"ParameterSpaces$o2i(...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"... [function] One transformation functions, named according parameters. Transformers Optimization Space Interpretation Space (o2i) must receive numeric. default identity.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"method-i-o-","dir":"Reference","previous_headings":"","what":"Method i2o()","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"Define transformation functions switching Interpretation Space Optimization Space.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"ParameterSpaces$i2o(...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"... [function] One transformers functions, named according parameters. Transformers Interpretation Space Optimization Space (i2o) must return numeric. default .vector().","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"objects class cloneable method.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"ParameterSpaces$clone(deep = FALSE)"},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"deep Whether make deep clone.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/ParameterSpaces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch Between Parameter Spaces — ParameterSpaces","text":"","code":"### Log-likelihood function of two-class Gaussian mixture model with ### parameter vector `theta` that consists of ### - `mu`, mean vector of length 2 ### - `sd`, standard deviation vector of length 2, must be positive ### - `lambda`, class probability of length 1, must be between 0 and 1  normal_mixture_llk <- function(theta, data) {   mu <- theta[1:2]   sd <- exp(theta[3:4])   lambda <- plogis(theta[5])   c1 <- lambda * dnorm(data, mu[1], sd[1])   c2 <- (1 - lambda) * dnorm(data, mu[2], sd[2])   sum(log(c1 + c2)) }  ### define parameter spaces ### - `mu` needs no transformation ### - `sd` needs to be real in optimization space and positive in ###    interpretation space ### - `lambda` needs to be real and of length `1` in optimization space, and ###    a probability vector of length `2` in interpretation space  normal_mixture_spaces <- ParameterSpaces$   new(     parameter_names = c(\"mu\", \"sd\", \"lambda\"),     parameter_lengths_in_o_space = c(2, 2, 1)   )$   o2i(     \"mu\" = function(x) x,     \"sd\" = function(x) exp(x),     \"lambda\" = function(x) c(plogis(x), 1 - plogis(x))   )$   i2o(     \"mu\" = function(x) x,     \"sd\" = function(x) log(x),     \"lambda\" = function(x) qlogis(x[1])   )  ### switch between parameter spaces  par <- list(                             # parameters in interpretation space   \"mu\" = c(2, 4),   \"sd\" = c(0.5, 1),   \"lambda\" = c(0.4, 0.6) ) (x <- normal_mixture_spaces$switch(par)) # switch to optimization space #> [1]  2.0000000  4.0000000 -0.6931472  0.0000000 -0.4054651 normal_mixture_llk(   theta = x, data = datasets::faithful$eruptions ) #> [1] -382.1072 normal_mixture_spaces$switch(x)          # switch back #> $mu #> [1] 2 4 #>  #> $sd #> [1] 0.5 1.0 #>  #> $lambda #> [1] 0.4 0.6 #>"},{"path":"https://loelschlaeger.de/optimizeR/reference/apply_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply optimizer object — apply_optimizer","title":"Apply optimizer object — apply_optimizer","text":"function performs numerical optimization using optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/apply_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply optimizer object — apply_optimizer","text":"","code":"apply_optimizer(optimizer = optimizer_nlm(), objective, initial, ...)"},{"path":"https://loelschlaeger.de/optimizeR/reference/apply_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply optimizer object — apply_optimizer","text":"optimizer object class optimizer. objective function optimized, returning single numeric. first argument must numeric vector length initial, followed arguments specified ... argument. initial numeric vector starting parameter values optimization. ... Additional arguments passed optimizer.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/apply_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply optimizer object — apply_optimizer","text":"named list, containing least four elements: value numeric, value estimated optimum objective. parameter numeric vector, parameter vector optimum objective obtained. seconds numeric, total optimization time seconds. initial numeric, initial parameter values. Appended additional output elements optimizer (excluded output_ignore element via define_optimizer).","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/apply_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply optimizer object — apply_optimizer","text":"","code":"apply_optimizer(optimizer_nlm(), function(x) x^4 + 3*x - 5, 2) #> $value #> [1] -7.044261 #>  #> $parameter #> [1] -0.9085614 #>  #> $seconds #> [1] 0.001206636 #>  #> $initial #> [1] 2 #>  #> $error #> [1] FALSE #>  #> $gradient #> [1] -6.068035e-06 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 7 #>"},{"path":"https://loelschlaeger.de/optimizeR/reference/define_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify numerical optimizer — define_optimizer","title":"Specify numerical optimizer — define_optimizer","text":"function specifies framework numerical optimizer. Two wrappers well-known optimizers already available: optimizer_nlm() nlm optimizer optimizer_optim() optim optimizer","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/define_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify numerical optimizer — define_optimizer","text":"","code":"define_optimizer(   .optimizer,   .objective,   .initial,   .value,   .parameter,   .direction,   ...,   .output_ignore = character(0),   .validate = FALSE,   .validation_settings = list(objective_test = TestFunctions::TF_ackley, objective_add =     list(), initial = round(stats::rnorm(2), 2), check_seconds = 10) )  optimizer_nlm(   ...,   .output_ignore = character(0),   .validate = FALSE,   .validation_settings = list() )  optimizer_optim(   ...,   .direction = \"min\",   .output_ignore = character(0),   .validate = FALSE,   .validation_settings = list() )"},{"path":"https://loelschlaeger.de/optimizeR/reference/define_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify numerical optimizer — define_optimizer","text":".optimizer function, numerical optimizer. Four conditions must met: must input named .objective function, objective function optimized first argument. must input named .initial numerical vector, initial parameter vector. must ... argument additional parameters objective function. output must named list, including optimal function value optimal parameter vector. .objective character, name function input optimizer. .initial character, name starting parameter values input optimizer. .value character, name optimal function value output list optimizer. .parameter character, name optimal parameter vector output list optimizer. .direction character, indicates whether optimizer minimizes (\"min\") maximizes (\"max\"). ... Additional arguments passed optimizer. Without specifications, default values optimizer used. .output_ignore character vector element names output .optimizer saved. elements .value .parameter added automatically .output_ignore, saved separately, see output documentation apply_optimizer. .validate logical, set TRUE (FALSE) () validate optimizer object. default, .validate = FALSE. .validation_settings Ignored .valdiate = FALSE. Otherwise, list validation settings: objective_test function, test function optimized. default, Ackley function. objective_add list additional arguments objective_test (). default, objective_add = list(), default function objective_test additional arguments. initial numeric vector, initial values optimization objective_test. default, initial = round(stats::rnorm(2), 2). check_seconds integer, maximum number seconds test aborted. test call considered successful error occurred within check_seconds seconds. default, check_seconds = 10.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/define_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify numerical optimizer — define_optimizer","text":"optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/define_optimizer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Specify numerical optimizer — define_optimizer","text":"optimizer object list six elements: optimizer function, optimization algorithm. optimizer_name character, name optimizer. optimizer_arguments named list, element additional function argument optimizer. optimizer_direction Either \"min\" optimizer minimizes \"max\" optimizer maximizes. optimizer_labels named list four character: objective name function input optimizer initial name starting parameter values input optimizer value name optimal function value output list optimizer parameter name optimal parameter vector output list optimizer. output_ignore character vector element names output list optimizer ignored. elements value parameter added automatically output_ignore, saved separately, see output documentation apply_optimizer.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/define_optimizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify numerical optimizer — define_optimizer","text":"","code":"define_optimizer(   .optimizer = pracma::nelder_mead,           # optimization function   .objective = \"fn\",                          # name of function input   .initial = \"x0\",                            # name of initial input   .value = \"fmin\",                            # name of value output   .parameter = \"xmin\",                        # name of parameter output   .direction = \"min\",                         # optimizer minimizes   .output_ignore = c(\"restarts\", \"errmess\"),  # ignore some outputs   tol = 1e-6,                                 # additional optimizer argument   .validate = TRUE                            # validate the object ) #> <optimizer 'pracma::nelder_mead'>"},{"path":"https://loelschlaeger.de/optimizeR/reference/new_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct optimizer object — new_optimizer","title":"Construct optimizer object — new_optimizer","text":"function constructs S3 optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/new_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct optimizer object — new_optimizer","text":"","code":"new_optimizer(   x = list(),   .optimizer = function() {  },   optimizer_name = character(),   optimizer_arguments = list(),   .objective = character(),   .initial = character(),   .value = character(),   .parameter = character(),   .direction = character(),   .output_ignore = character() )"},{"path":"https://loelschlaeger.de/optimizeR/reference/new_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct optimizer object — new_optimizer","text":"x list. .optimizer function, numerical optimizer. Four conditions must met: must input named .objective function, objective function optimized first argument. must input named .initial numerical vector, initial parameter vector. must ... argument additional parameters objective function. output must named list, including optimal function value optimal parameter vector. optimizer_name character, name optimizer. optimizer_arguments list additional named arguments passed optimizer. .objective character, name function input optimizer. .initial character, name starting parameter values input optimizer. .value character, name optimal function value output list optimizer. .parameter character, name optimal parameter vector output list optimizer. .direction character, indicates whether optimizer minimizes (\"min\") maximizes (\"max\"). .output_ignore character vector element names output .optimizer saved. elements .value .parameter added automatically .output_ignore, saved separately, see output documentation apply_optimizer.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/new_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct optimizer object — new_optimizer","text":"S3 object class optimizer.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/new_optimizer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Construct optimizer object — new_optimizer","text":"optimizer object list six elements: optimizer function, optimization algorithm. optimizer_name character, name optimizer. optimizer_arguments named list, element additional function argument optimizer. optimizer_direction Either \"min\" optimizer minimizes \"max\" optimizer maximizes. optimizer_labels named list four character: objective name function input optimizer initial name starting parameter values input optimizer value name optimal function value output list optimizer parameter name optimal parameter vector output list optimizer. output_ignore character vector element names output list optimizer ignored. elements value parameter added automatically output_ignore, saved separately, see output documentation apply_optimizer.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/optimizeR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"optimizeR: Unified Framework for Numerical Optimizers — optimizeR-package","title":"optimizeR: Unified Framework for Numerical Optimizers — optimizeR-package","text":"Provides unified object-oriented framework numerical optimizers R. Allows minimization maximization optimizer, optimization one function argument, measuring computation time, setting time limit long optimization tasks.","code":""},{"path":[]},{"path":"https://loelschlaeger.de/optimizeR/reference/optimizeR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"optimizeR: Unified Framework for Numerical Optimizers — optimizeR-package","text":"Maintainer: Lennart Oelschläger oelschlaeger.lennart@gmail.com (ORCID) contributors: Marius Ötting marius.oetting@uni-bielefeld.de (ORCID) [contributor]","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/optimizer_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of optimizer functions — optimizer_dictionary","title":"Dictionary of optimizer functions — optimizer_dictionary","text":"optimizer_dictionary object dictionary currently implemented numerical optimizer functions.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/optimizer_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary of optimizer functions — optimizer_dictionary","text":"","code":"optimizer_dictionary"},{"path":"https://loelschlaeger.de/optimizeR/reference/optimizer_dictionary.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of optimizer functions — optimizer_dictionary","text":"R6 object class Dictionary.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/test_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Test objective function — test_objective","title":"Test objective function — test_objective","text":"function useful testing debugging behavior objective functions. can throw warning / error purpose.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/test_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test objective function — test_objective","text":"","code":"test_objective(   x,   value = x,   warning_prob = 0,   error_prob = 0,   warning_msg = \"warning\",   error_msg = \"error\",   call. = TRUE )"},{"path":"https://loelschlaeger.de/optimizeR/reference/test_objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test objective function — test_objective","text":"x input. value return value, object. warning_prob probability throwing warning. error_prob probability throwing error. warning_msg warning message. error_msg error message. call. Passed warning stop, respectively.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/test_objective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test objective function — test_objective","text":"argument value.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/test_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Test optimization function — test_optimizer","title":"Test optimization function — test_optimizer","text":"function useful testing debugging behavior optimization functions. can throw warning / error purpose.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/test_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test optimization function — test_optimizer","text":"","code":"test_optimizer(   objective = test_objective,   initial = 1,   ...,   parameter = 1,   value = objective(parameter),   seconds = 0,   warning_prob = 0,   error_prob = 0,   warning_msg = \"warning\",   error_msg = \"error\",   call. = TRUE )"},{"path":"https://loelschlaeger.de/optimizeR/reference/test_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test optimization function — test_optimizer","text":"objective objective function. initial initial parameter vector. ... Optionally additional arguments passed objective. parameter Defines output parameter. value Defines output value. seconds delay number seconds. warning_prob probability throwing warning. error_prob probability throwing error. warning_msg warning message. error_msg error message. call. Passed warning stop, respectively.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/test_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test optimization function — test_optimizer","text":"list elements parameter value.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/validate_optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate optimizer object — validate_optimizer","title":"Validate optimizer object — validate_optimizer","text":"function validates optimizer object.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/validate_optimizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate optimizer object — validate_optimizer","text":"","code":"validate_optimizer(   x = new_optimizer(),   .validate = FALSE,   .validation_settings = list() )"},{"path":"https://loelschlaeger.de/optimizeR/reference/validate_optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate optimizer object — validate_optimizer","text":"x object class optimizer. .validate logical, set TRUE (FALSE) () validate optimizer object. default, .validate = FALSE. .validation_settings Ignored .valdiate = FALSE. Otherwise, list validation settings: objective_test function, test function optimized. default, Ackley function. objective_add list additional arguments objective_test (). default, objective_add = list(), default function objective_test additional arguments. initial numeric vector, initial values optimization objective_test. default, initial = round(stats::rnorm(2), 2). check_seconds integer, maximum number seconds test aborted. test call considered successful error occurred within check_seconds seconds. default, check_seconds = 10.","code":""},{"path":"https://loelschlaeger.de/optimizeR/reference/validate_optimizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate optimizer object — validate_optimizer","text":"validated input x.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-112","dir":"Changelog","previous_headings":"","what":"optimizer 1.1.2","title":"optimizer 1.1.2","text":"New ParameterSpaces R6 object transform parameters optimization interpretation space.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-105","dir":"Changelog","previous_headings":"","what":"optimizeR 1.0.5","title":"optimizeR 1.0.5","text":"CRAN release: 2024-02-28 Removed install_optimizer_packages().","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-104","dir":"Changelog","previous_headings":"","what":"optimizeR 1.0.4","title":"optimizeR 1.0.4","text":"CRAN release: 2024-02-05 Fixed bug added test cases fixed arguments NULL.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-103","dir":"Changelog","previous_headings":"","what":"optimizeR 1.0.3","title":"optimizeR 1.0.3","text":"CRAN release: 2024-01-31 Fixed bug creating error message case time . Added checks objective, initial, ellipsis argument optimizer function. Added verbose argument methods $get_argument() $remove_argument() Objective object. Added field fixed_arguments Objective object returns names fixed arguments. Fixed bug proper backwards compatibility.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-102","dir":"Changelog","previous_headings":"","what":"optimizeR 1.0.2","title":"optimizeR 1.0.2","text":"CRAN release: 2024-01-14 Small bug fixes. Backward compatibility optimizeR version 0.3.3.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-101","dir":"Changelog","previous_headings":"","what":"optimizeR 1.0.1","title":"optimizeR 1.0.1","text":"CRAN release: 2023-11-08 Fixed wrong values \"out_value\" \"out_parameter\" optimizer dictionary entry stats::optim.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-100","dir":"Changelog","previous_headings":"","what":"optimizeR 1.0.0","title":"optimizeR 1.0.0","text":"CRAN release: 2023-11-04 Instead using S3 classes, treat optimizers R6 objects now.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-033","dir":"Changelog","previous_headings":"","what":"optimizeR 0.3.3","title":"optimizeR 0.3.3","text":"CRAN release: 2023-09-27 Removed package start-message. Added .direction argument define_optimizer() specify whether optimizer minimizes maximizes. Added dot argument names define_optimizer() avoid clashes ... argument. Removed dependency glue. Using TestFunctions::TF_ackley instead implementation Ackley function (validation).","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-032","dir":"Changelog","previous_headings":"","what":"optimizeR 0.3.2","title":"optimizeR 0.3.2","text":"CRAN release: 2023-03-25 Just added package logo created package website (https://loelschlaeger.de/optimizeR) {pkgdown} package. code changes.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-031","dir":"Changelog","previous_headings":"","what":"optimizeR 0.3.1","title":"optimizeR 0.3.1","text":"CRAN release: 2023-03-05 define_optimizer(), now validate = FALSE default.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-030","dir":"Changelog","previous_headings":"","what":"optimizeR 0.3.0","title":"optimizeR 0.3.0","text":"CRAN release: 2023-01-22 Function set_optimizer() renamed define_optimizer(). Inputs define_optimizer() renamed clarity: opt_fun -> optimizer f -> objective p -> initial v -> value z -> parameter out_ign -> output_ignore test_par -> validation_settings Elements input validation_settings simplified, please see documentation define_optimizer(). Elements output apply_optimizer() renamed clarity: v -> value z -> parameter time -> seconds (now just numeric) Element initial (starting parameter vector) added output apply_optimizer().","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-020","dir":"Changelog","previous_headings":"","what":"optimizeR 0.2.0","title":"optimizeR 0.2.0","text":"CRAN release: 2022-12-02 functions renamed: optimizeR() -> apply_optimizer() set_optimizer_nlm() -> optimizer_nlm() set_optimizer_optim() -> optimizer_optim() Functions is_number(), try_silent(), timed(), .call_timed() longer exported. Function try_silent_timed() removed.","code":""},{"path":"https://loelschlaeger.de/optimizeR/news/index.html","id":"optimizer-010","dir":"Changelog","previous_headings":"","what":"optimizeR 0.1.0","title":"optimizeR 0.1.0","text":"CRAN release: 2022-08-23 Initial CRAN release.","code":""}]
